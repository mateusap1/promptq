// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mateusap1/promptq/ent/predicate"
	"github.com/mateusap1/promptq/ent/promptrequest"
	"github.com/mateusap1/promptq/ent/promptresponse"
	"github.com/mateusap1/promptq/ent/user"
)

// PromptRequestUpdate is the builder for updating PromptRequest entities.
type PromptRequestUpdate struct {
	config
	hooks    []Hook
	mutation *PromptRequestMutation
}

// Where appends a list predicates to the PromptRequestUpdate builder.
func (pru *PromptRequestUpdate) Where(ps ...predicate.PromptRequest) *PromptRequestUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetIdentifier sets the "identifier" field.
func (pru *PromptRequestUpdate) SetIdentifier(u uuid.UUID) *PromptRequestUpdate {
	pru.mutation.SetIdentifier(u)
	return pru
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillableIdentifier(u *uuid.UUID) *PromptRequestUpdate {
	if u != nil {
		pru.SetIdentifier(*u)
	}
	return pru
}

// SetPrompt sets the "prompt" field.
func (pru *PromptRequestUpdate) SetPrompt(s string) *PromptRequestUpdate {
	pru.mutation.SetPrompt(s)
	return pru
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillablePrompt(s *string) *PromptRequestUpdate {
	if s != nil {
		pru.SetPrompt(*s)
	}
	return pru
}

// SetIsQueued sets the "is_queued" field.
func (pru *PromptRequestUpdate) SetIsQueued(b bool) *PromptRequestUpdate {
	pru.mutation.SetIsQueued(b)
	return pru
}

// SetNillableIsQueued sets the "is_queued" field if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillableIsQueued(b *bool) *PromptRequestUpdate {
	if b != nil {
		pru.SetIsQueued(*b)
	}
	return pru
}

// SetIsAnswered sets the "is_answered" field.
func (pru *PromptRequestUpdate) SetIsAnswered(b bool) *PromptRequestUpdate {
	pru.mutation.SetIsAnswered(b)
	return pru
}

// SetNillableIsAnswered sets the "is_answered" field if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillableIsAnswered(b *bool) *PromptRequestUpdate {
	if b != nil {
		pru.SetIsAnswered(*b)
	}
	return pru
}

// SetCreateDate sets the "create_date" field.
func (pru *PromptRequestUpdate) SetCreateDate(t time.Time) *PromptRequestUpdate {
	pru.mutation.SetCreateDate(t)
	return pru
}

// SetNillableCreateDate sets the "create_date" field if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillableCreateDate(t *time.Time) *PromptRequestUpdate {
	if t != nil {
		pru.SetCreateDate(*t)
	}
	return pru
}

// SetPromptResponseID sets the "prompt_response" edge to the PromptResponse entity by ID.
func (pru *PromptRequestUpdate) SetPromptResponseID(id int) *PromptRequestUpdate {
	pru.mutation.SetPromptResponseID(id)
	return pru
}

// SetNillablePromptResponseID sets the "prompt_response" edge to the PromptResponse entity by ID if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillablePromptResponseID(id *int) *PromptRequestUpdate {
	if id != nil {
		pru = pru.SetPromptResponseID(*id)
	}
	return pru
}

// SetPromptResponse sets the "prompt_response" edge to the PromptResponse entity.
func (pru *PromptRequestUpdate) SetPromptResponse(p *PromptResponse) *PromptRequestUpdate {
	return pru.SetPromptResponseID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pru *PromptRequestUpdate) SetUserID(id int) *PromptRequestUpdate {
	pru.mutation.SetUserID(id)
	return pru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pru *PromptRequestUpdate) SetNillableUserID(id *int) *PromptRequestUpdate {
	if id != nil {
		pru = pru.SetUserID(*id)
	}
	return pru
}

// SetUser sets the "user" edge to the User entity.
func (pru *PromptRequestUpdate) SetUser(u *User) *PromptRequestUpdate {
	return pru.SetUserID(u.ID)
}

// Mutation returns the PromptRequestMutation object of the builder.
func (pru *PromptRequestUpdate) Mutation() *PromptRequestMutation {
	return pru.mutation
}

// ClearPromptResponse clears the "prompt_response" edge to the PromptResponse entity.
func (pru *PromptRequestUpdate) ClearPromptResponse() *PromptRequestUpdate {
	pru.mutation.ClearPromptResponse()
	return pru
}

// ClearUser clears the "user" edge to the User entity.
func (pru *PromptRequestUpdate) ClearUser() *PromptRequestUpdate {
	pru.mutation.ClearUser()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PromptRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PromptRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PromptRequestUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PromptRequestUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *PromptRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promptrequest.Table, promptrequest.Columns, sqlgraph.NewFieldSpec(promptrequest.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.Identifier(); ok {
		_spec.SetField(promptrequest.FieldIdentifier, field.TypeUUID, value)
	}
	if value, ok := pru.mutation.Prompt(); ok {
		_spec.SetField(promptrequest.FieldPrompt, field.TypeString, value)
	}
	if value, ok := pru.mutation.IsQueued(); ok {
		_spec.SetField(promptrequest.FieldIsQueued, field.TypeBool, value)
	}
	if value, ok := pru.mutation.IsAnswered(); ok {
		_spec.SetField(promptrequest.FieldIsAnswered, field.TypeBool, value)
	}
	if value, ok := pru.mutation.CreateDate(); ok {
		_spec.SetField(promptrequest.FieldCreateDate, field.TypeTime, value)
	}
	if pru.mutation.PromptResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promptrequest.PromptResponseTable,
			Columns: []string{promptrequest.PromptResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PromptResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promptrequest.PromptResponseTable,
			Columns: []string{promptrequest.PromptResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptrequest.UserTable,
			Columns: []string{promptrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptrequest.UserTable,
			Columns: []string{promptrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promptrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PromptRequestUpdateOne is the builder for updating a single PromptRequest entity.
type PromptRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptRequestMutation
}

// SetIdentifier sets the "identifier" field.
func (pruo *PromptRequestUpdateOne) SetIdentifier(u uuid.UUID) *PromptRequestUpdateOne {
	pruo.mutation.SetIdentifier(u)
	return pruo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillableIdentifier(u *uuid.UUID) *PromptRequestUpdateOne {
	if u != nil {
		pruo.SetIdentifier(*u)
	}
	return pruo
}

// SetPrompt sets the "prompt" field.
func (pruo *PromptRequestUpdateOne) SetPrompt(s string) *PromptRequestUpdateOne {
	pruo.mutation.SetPrompt(s)
	return pruo
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillablePrompt(s *string) *PromptRequestUpdateOne {
	if s != nil {
		pruo.SetPrompt(*s)
	}
	return pruo
}

// SetIsQueued sets the "is_queued" field.
func (pruo *PromptRequestUpdateOne) SetIsQueued(b bool) *PromptRequestUpdateOne {
	pruo.mutation.SetIsQueued(b)
	return pruo
}

// SetNillableIsQueued sets the "is_queued" field if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillableIsQueued(b *bool) *PromptRequestUpdateOne {
	if b != nil {
		pruo.SetIsQueued(*b)
	}
	return pruo
}

// SetIsAnswered sets the "is_answered" field.
func (pruo *PromptRequestUpdateOne) SetIsAnswered(b bool) *PromptRequestUpdateOne {
	pruo.mutation.SetIsAnswered(b)
	return pruo
}

// SetNillableIsAnswered sets the "is_answered" field if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillableIsAnswered(b *bool) *PromptRequestUpdateOne {
	if b != nil {
		pruo.SetIsAnswered(*b)
	}
	return pruo
}

// SetCreateDate sets the "create_date" field.
func (pruo *PromptRequestUpdateOne) SetCreateDate(t time.Time) *PromptRequestUpdateOne {
	pruo.mutation.SetCreateDate(t)
	return pruo
}

// SetNillableCreateDate sets the "create_date" field if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillableCreateDate(t *time.Time) *PromptRequestUpdateOne {
	if t != nil {
		pruo.SetCreateDate(*t)
	}
	return pruo
}

// SetPromptResponseID sets the "prompt_response" edge to the PromptResponse entity by ID.
func (pruo *PromptRequestUpdateOne) SetPromptResponseID(id int) *PromptRequestUpdateOne {
	pruo.mutation.SetPromptResponseID(id)
	return pruo
}

// SetNillablePromptResponseID sets the "prompt_response" edge to the PromptResponse entity by ID if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillablePromptResponseID(id *int) *PromptRequestUpdateOne {
	if id != nil {
		pruo = pruo.SetPromptResponseID(*id)
	}
	return pruo
}

// SetPromptResponse sets the "prompt_response" edge to the PromptResponse entity.
func (pruo *PromptRequestUpdateOne) SetPromptResponse(p *PromptResponse) *PromptRequestUpdateOne {
	return pruo.SetPromptResponseID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pruo *PromptRequestUpdateOne) SetUserID(id int) *PromptRequestUpdateOne {
	pruo.mutation.SetUserID(id)
	return pruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pruo *PromptRequestUpdateOne) SetNillableUserID(id *int) *PromptRequestUpdateOne {
	if id != nil {
		pruo = pruo.SetUserID(*id)
	}
	return pruo
}

// SetUser sets the "user" edge to the User entity.
func (pruo *PromptRequestUpdateOne) SetUser(u *User) *PromptRequestUpdateOne {
	return pruo.SetUserID(u.ID)
}

// Mutation returns the PromptRequestMutation object of the builder.
func (pruo *PromptRequestUpdateOne) Mutation() *PromptRequestMutation {
	return pruo.mutation
}

// ClearPromptResponse clears the "prompt_response" edge to the PromptResponse entity.
func (pruo *PromptRequestUpdateOne) ClearPromptResponse() *PromptRequestUpdateOne {
	pruo.mutation.ClearPromptResponse()
	return pruo
}

// ClearUser clears the "user" edge to the User entity.
func (pruo *PromptRequestUpdateOne) ClearUser() *PromptRequestUpdateOne {
	pruo.mutation.ClearUser()
	return pruo
}

// Where appends a list predicates to the PromptRequestUpdate builder.
func (pruo *PromptRequestUpdateOne) Where(ps ...predicate.PromptRequest) *PromptRequestUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PromptRequestUpdateOne) Select(field string, fields ...string) *PromptRequestUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PromptRequest entity.
func (pruo *PromptRequestUpdateOne) Save(ctx context.Context) (*PromptRequest, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PromptRequestUpdateOne) SaveX(ctx context.Context) *PromptRequest {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PromptRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PromptRequestUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *PromptRequestUpdateOne) sqlSave(ctx context.Context) (_node *PromptRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(promptrequest.Table, promptrequest.Columns, sqlgraph.NewFieldSpec(promptrequest.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromptRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promptrequest.FieldID)
		for _, f := range fields {
			if !promptrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promptrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.Identifier(); ok {
		_spec.SetField(promptrequest.FieldIdentifier, field.TypeUUID, value)
	}
	if value, ok := pruo.mutation.Prompt(); ok {
		_spec.SetField(promptrequest.FieldPrompt, field.TypeString, value)
	}
	if value, ok := pruo.mutation.IsQueued(); ok {
		_spec.SetField(promptrequest.FieldIsQueued, field.TypeBool, value)
	}
	if value, ok := pruo.mutation.IsAnswered(); ok {
		_spec.SetField(promptrequest.FieldIsAnswered, field.TypeBool, value)
	}
	if value, ok := pruo.mutation.CreateDate(); ok {
		_spec.SetField(promptrequest.FieldCreateDate, field.TypeTime, value)
	}
	if pruo.mutation.PromptResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promptrequest.PromptResponseTable,
			Columns: []string{promptrequest.PromptResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PromptResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promptrequest.PromptResponseTable,
			Columns: []string{promptrequest.PromptResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptrequest.UserTable,
			Columns: []string{promptrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptrequest.UserTable,
			Columns: []string{promptrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PromptRequest{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promptrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
