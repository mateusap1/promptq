// Code generated by ent, DO NOT EDIT.

package promptresponse

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promptresponse type in the database.
	Label = "prompt_response"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResponse holds the string denoting the response field in the database.
	FieldResponse = "response"
	// FieldIsAnswered holds the string denoting the is_answered field in the database.
	FieldIsAnswered = "is_answered"
	// EdgePromptRequest holds the string denoting the prompt_request edge name in mutations.
	EdgePromptRequest = "prompt_request"
	// Table holds the table name of the promptresponse in the database.
	Table = "prompt_responses"
	// PromptRequestTable is the table that holds the prompt_request relation/edge.
	PromptRequestTable = "prompt_responses"
	// PromptRequestInverseTable is the table name for the PromptRequest entity.
	// It exists in this package in order to avoid circular dependency with the "promptrequest" package.
	PromptRequestInverseTable = "prompt_requests"
	// PromptRequestColumn is the table column denoting the prompt_request relation/edge.
	PromptRequestColumn = "prompt_request_prompt_response"
)

// Columns holds all SQL columns for promptresponse fields.
var Columns = []string{
	FieldID,
	FieldResponse,
	FieldIsAnswered,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "prompt_responses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"prompt_request_prompt_response",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsAnswered holds the default value on creation for the "is_answered" field.
	DefaultIsAnswered bool
)

// OrderOption defines the ordering options for the PromptResponse queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResponse orders the results by the response field.
func ByResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponse, opts...).ToFunc()
}

// ByIsAnswered orders the results by the is_answered field.
func ByIsAnswered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAnswered, opts...).ToFunc()
}

// ByPromptRequestField orders the results by prompt_request field.
func ByPromptRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromptRequestStep(), sql.OrderByField(field, opts...))
	}
}
func newPromptRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromptRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PromptRequestTable, PromptRequestColumn),
	)
}
