// Code generated by ent, DO NOT EDIT.

package promptresponse

import (
	"entgo.io/ent/dialect/sql"
	"github.com/mateusap1/promptq/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldLTE(FieldID, id))
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEQ(FieldResponse, v))
}

// IsAnswered applies equality check predicate on the "is_answered" field. It's identical to IsAnsweredEQ.
func IsAnswered(v bool) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEQ(FieldIsAnswered, v))
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEQ(FieldResponse, v))
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldNEQ(FieldResponse, v))
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldIn(FieldResponse, vs...))
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldNotIn(FieldResponse, vs...))
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldGT(FieldResponse, v))
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldGTE(FieldResponse, v))
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldLT(FieldResponse, v))
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldLTE(FieldResponse, v))
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldContains(FieldResponse, v))
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldHasPrefix(FieldResponse, v))
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldHasSuffix(FieldResponse, v))
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEqualFold(FieldResponse, v))
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldContainsFold(FieldResponse, v))
}

// IsAnsweredEQ applies the EQ predicate on the "is_answered" field.
func IsAnsweredEQ(v bool) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldEQ(FieldIsAnswered, v))
}

// IsAnsweredNEQ applies the NEQ predicate on the "is_answered" field.
func IsAnsweredNEQ(v bool) predicate.PromptResponse {
	return predicate.PromptResponse(sql.FieldNEQ(FieldIsAnswered, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromptResponse) predicate.PromptResponse {
	return predicate.PromptResponse(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromptResponse) predicate.PromptResponse {
	return predicate.PromptResponse(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromptResponse) predicate.PromptResponse {
	return predicate.PromptResponse(sql.NotPredicates(p))
}
