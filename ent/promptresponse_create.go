// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mateusap1/promptq/ent/promptrequest"
	"github.com/mateusap1/promptq/ent/promptresponse"
)

// PromptResponseCreate is the builder for creating a PromptResponse entity.
type PromptResponseCreate struct {
	config
	mutation *PromptResponseMutation
	hooks    []Hook
}

// SetResponse sets the "response" field.
func (prc *PromptResponseCreate) SetResponse(s string) *PromptResponseCreate {
	prc.mutation.SetResponse(s)
	return prc
}

// SetPromptRequestID sets the "prompt_request" edge to the PromptRequest entity by ID.
func (prc *PromptResponseCreate) SetPromptRequestID(id int) *PromptResponseCreate {
	prc.mutation.SetPromptRequestID(id)
	return prc
}

// SetPromptRequest sets the "prompt_request" edge to the PromptRequest entity.
func (prc *PromptResponseCreate) SetPromptRequest(p *PromptRequest) *PromptResponseCreate {
	return prc.SetPromptRequestID(p.ID)
}

// Mutation returns the PromptResponseMutation object of the builder.
func (prc *PromptResponseCreate) Mutation() *PromptResponseMutation {
	return prc.mutation
}

// Save creates the PromptResponse in the database.
func (prc *PromptResponseCreate) Save(ctx context.Context) (*PromptResponse, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PromptResponseCreate) SaveX(ctx context.Context) *PromptResponse {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PromptResponseCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PromptResponseCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PromptResponseCreate) check() error {
	if _, ok := prc.mutation.Response(); !ok {
		return &ValidationError{Name: "response", err: errors.New(`ent: missing required field "PromptResponse.response"`)}
	}
	if _, ok := prc.mutation.PromptRequestID(); !ok {
		return &ValidationError{Name: "prompt_request", err: errors.New(`ent: missing required edge "PromptResponse.prompt_request"`)}
	}
	return nil
}

func (prc *PromptResponseCreate) sqlSave(ctx context.Context) (*PromptResponse, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PromptResponseCreate) createSpec() (*PromptResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &PromptResponse{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(promptresponse.Table, sqlgraph.NewFieldSpec(promptresponse.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.Response(); ok {
		_spec.SetField(promptresponse.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	if nodes := prc.mutation.PromptRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promptresponse.PromptRequestTable,
			Columns: []string{promptresponse.PromptRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.prompt_request_prompt_response = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PromptResponseCreateBulk is the builder for creating many PromptResponse entities in bulk.
type PromptResponseCreateBulk struct {
	config
	err      error
	builders []*PromptResponseCreate
}

// Save creates the PromptResponse entities in the database.
func (prcb *PromptResponseCreateBulk) Save(ctx context.Context) ([]*PromptResponse, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PromptResponse, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromptResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PromptResponseCreateBulk) SaveX(ctx context.Context) []*PromptResponse {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PromptResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PromptResponseCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
