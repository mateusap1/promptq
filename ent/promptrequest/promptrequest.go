// Code generated by ent, DO NOT EDIT.

package promptrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the promptrequest type in the database.
	Label = "prompt_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldIsQueued holds the string denoting the is_queued field in the database.
	FieldIsQueued = "is_queued"
	// FieldIsAnswered holds the string denoting the is_answered field in the database.
	FieldIsAnswered = "is_answered"
	// FieldCreateDate holds the string denoting the create_date field in the database.
	FieldCreateDate = "create_date"
	// EdgePromptResponse holds the string denoting the prompt_response edge name in mutations.
	EdgePromptResponse = "prompt_response"
	// Table holds the table name of the promptrequest in the database.
	Table = "prompt_requests"
	// PromptResponseTable is the table that holds the prompt_response relation/edge.
	PromptResponseTable = "prompt_responses"
	// PromptResponseInverseTable is the table name for the PromptResponse entity.
	// It exists in this package in order to avoid circular dependency with the "promptresponse" package.
	PromptResponseInverseTable = "prompt_responses"
	// PromptResponseColumn is the table column denoting the prompt_response relation/edge.
	PromptResponseColumn = "prompt_request_prompt_response"
)

// Columns holds all SQL columns for promptrequest fields.
var Columns = []string{
	FieldID,
	FieldIdentifier,
	FieldPrompt,
	FieldIsQueued,
	FieldIsAnswered,
	FieldCreateDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIdentifier holds the default value on creation for the "identifier" field.
	DefaultIdentifier func() uuid.UUID
	// DefaultIsQueued holds the default value on creation for the "is_queued" field.
	DefaultIsQueued bool
	// DefaultIsAnswered holds the default value on creation for the "is_answered" field.
	DefaultIsAnswered bool
	// DefaultCreateDate holds the default value on creation for the "create_date" field.
	DefaultCreateDate func() time.Time
)

// OrderOption defines the ordering options for the PromptRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByIsQueued orders the results by the is_queued field.
func ByIsQueued(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsQueued, opts...).ToFunc()
}

// ByIsAnswered orders the results by the is_answered field.
func ByIsAnswered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAnswered, opts...).ToFunc()
}

// ByCreateDate orders the results by the create_date field.
func ByCreateDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateDate, opts...).ToFunc()
}

// ByPromptResponseField orders the results by prompt_response field.
func ByPromptResponseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromptResponseStep(), sql.OrderByField(field, opts...))
	}
}
func newPromptResponseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromptResponseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PromptResponseTable, PromptResponseColumn),
	)
}
