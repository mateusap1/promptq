// Code generated by ent, DO NOT EDIT.

package promptrequest

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the promptrequest type in the database.
	Label = "prompt_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldQueued holds the string denoting the queued field in the database.
	FieldQueued = "queued"
	// Table holds the table name of the promptrequest in the database.
	Table = "prompt_requests"
)

// Columns holds all SQL columns for promptrequest fields.
var Columns = []string{
	FieldID,
	FieldIdentifier,
	FieldPrompt,
	FieldQueued,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIdentifier holds the default value on creation for the "identifier" field.
	DefaultIdentifier func() string
	// DefaultQueued holds the default value on creation for the "queued" field.
	DefaultQueued bool
)

// OrderOption defines the ordering options for the PromptRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByQueued orders the results by the queued field.
func ByQueued(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueued, opts...).ToFunc()
}
