// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mateusap1/promptq/ent/predicate"
	"github.com/mateusap1/promptq/ent/promptrequest"
	"github.com/mateusap1/promptq/ent/promptresponse"
	"github.com/mateusap1/promptq/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePromptRequest  = "PromptRequest"
	TypePromptResponse = "PromptResponse"
	TypeUser           = "User"
)

// PromptRequestMutation represents an operation that mutates the PromptRequest nodes in the graph.
type PromptRequestMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	identifier             *uuid.UUID
	prompt                 *string
	is_queued              *bool
	is_answered            *bool
	create_date            *time.Time
	clearedFields          map[string]struct{}
	prompt_response        *int
	clearedprompt_response bool
	user                   *int
	cleareduser            bool
	done                   bool
	oldValue               func(context.Context) (*PromptRequest, error)
	predicates             []predicate.PromptRequest
}

var _ ent.Mutation = (*PromptRequestMutation)(nil)

// promptrequestOption allows management of the mutation configuration using functional options.
type promptrequestOption func(*PromptRequestMutation)

// newPromptRequestMutation creates new mutation for the PromptRequest entity.
func newPromptRequestMutation(c config, op Op, opts ...promptrequestOption) *PromptRequestMutation {
	m := &PromptRequestMutation{
		config:        c,
		op:            op,
		typ:           TypePromptRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPromptRequestID sets the ID field of the mutation.
func withPromptRequestID(id int) promptrequestOption {
	return func(m *PromptRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *PromptRequest
		)
		m.oldValue = func(ctx context.Context) (*PromptRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PromptRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPromptRequest sets the old PromptRequest of the mutation.
func withPromptRequest(node *PromptRequest) promptrequestOption {
	return func(m *PromptRequestMutation) {
		m.oldValue = func(context.Context) (*PromptRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PromptRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PromptRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PromptRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PromptRequestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PromptRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdentifier sets the "identifier" field.
func (m *PromptRequestMutation) SetIdentifier(u uuid.UUID) {
	m.identifier = &u
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *PromptRequestMutation) Identifier() (r uuid.UUID, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the PromptRequest entity.
// If the PromptRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptRequestMutation) OldIdentifier(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *PromptRequestMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetPrompt sets the "prompt" field.
func (m *PromptRequestMutation) SetPrompt(s string) {
	m.prompt = &s
}

// Prompt returns the value of the "prompt" field in the mutation.
func (m *PromptRequestMutation) Prompt() (r string, exists bool) {
	v := m.prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldPrompt returns the old "prompt" field's value of the PromptRequest entity.
// If the PromptRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptRequestMutation) OldPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrompt: %w", err)
	}
	return oldValue.Prompt, nil
}

// ResetPrompt resets all changes to the "prompt" field.
func (m *PromptRequestMutation) ResetPrompt() {
	m.prompt = nil
}

// SetIsQueued sets the "is_queued" field.
func (m *PromptRequestMutation) SetIsQueued(b bool) {
	m.is_queued = &b
}

// IsQueued returns the value of the "is_queued" field in the mutation.
func (m *PromptRequestMutation) IsQueued() (r bool, exists bool) {
	v := m.is_queued
	if v == nil {
		return
	}
	return *v, true
}

// OldIsQueued returns the old "is_queued" field's value of the PromptRequest entity.
// If the PromptRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptRequestMutation) OldIsQueued(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsQueued is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsQueued requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsQueued: %w", err)
	}
	return oldValue.IsQueued, nil
}

// ResetIsQueued resets all changes to the "is_queued" field.
func (m *PromptRequestMutation) ResetIsQueued() {
	m.is_queued = nil
}

// SetIsAnswered sets the "is_answered" field.
func (m *PromptRequestMutation) SetIsAnswered(b bool) {
	m.is_answered = &b
}

// IsAnswered returns the value of the "is_answered" field in the mutation.
func (m *PromptRequestMutation) IsAnswered() (r bool, exists bool) {
	v := m.is_answered
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAnswered returns the old "is_answered" field's value of the PromptRequest entity.
// If the PromptRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptRequestMutation) OldIsAnswered(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAnswered is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAnswered requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAnswered: %w", err)
	}
	return oldValue.IsAnswered, nil
}

// ResetIsAnswered resets all changes to the "is_answered" field.
func (m *PromptRequestMutation) ResetIsAnswered() {
	m.is_answered = nil
}

// SetCreateDate sets the "create_date" field.
func (m *PromptRequestMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *PromptRequestMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the PromptRequest entity.
// If the PromptRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptRequestMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *PromptRequestMutation) ResetCreateDate() {
	m.create_date = nil
}

// SetPromptResponseID sets the "prompt_response" edge to the PromptResponse entity by id.
func (m *PromptRequestMutation) SetPromptResponseID(id int) {
	m.prompt_response = &id
}

// ClearPromptResponse clears the "prompt_response" edge to the PromptResponse entity.
func (m *PromptRequestMutation) ClearPromptResponse() {
	m.clearedprompt_response = true
}

// PromptResponseCleared reports if the "prompt_response" edge to the PromptResponse entity was cleared.
func (m *PromptRequestMutation) PromptResponseCleared() bool {
	return m.clearedprompt_response
}

// PromptResponseID returns the "prompt_response" edge ID in the mutation.
func (m *PromptRequestMutation) PromptResponseID() (id int, exists bool) {
	if m.prompt_response != nil {
		return *m.prompt_response, true
	}
	return
}

// PromptResponseIDs returns the "prompt_response" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PromptResponseID instead. It exists only for internal usage by the builders.
func (m *PromptRequestMutation) PromptResponseIDs() (ids []int) {
	if id := m.prompt_response; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPromptResponse resets all changes to the "prompt_response" edge.
func (m *PromptRequestMutation) ResetPromptResponse() {
	m.prompt_response = nil
	m.clearedprompt_response = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PromptRequestMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PromptRequestMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PromptRequestMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PromptRequestMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PromptRequestMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PromptRequestMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PromptRequestMutation builder.
func (m *PromptRequestMutation) Where(ps ...predicate.PromptRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PromptRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PromptRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PromptRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PromptRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PromptRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PromptRequest).
func (m *PromptRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PromptRequestMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.identifier != nil {
		fields = append(fields, promptrequest.FieldIdentifier)
	}
	if m.prompt != nil {
		fields = append(fields, promptrequest.FieldPrompt)
	}
	if m.is_queued != nil {
		fields = append(fields, promptrequest.FieldIsQueued)
	}
	if m.is_answered != nil {
		fields = append(fields, promptrequest.FieldIsAnswered)
	}
	if m.create_date != nil {
		fields = append(fields, promptrequest.FieldCreateDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PromptRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case promptrequest.FieldIdentifier:
		return m.Identifier()
	case promptrequest.FieldPrompt:
		return m.Prompt()
	case promptrequest.FieldIsQueued:
		return m.IsQueued()
	case promptrequest.FieldIsAnswered:
		return m.IsAnswered()
	case promptrequest.FieldCreateDate:
		return m.CreateDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PromptRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case promptrequest.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case promptrequest.FieldPrompt:
		return m.OldPrompt(ctx)
	case promptrequest.FieldIsQueued:
		return m.OldIsQueued(ctx)
	case promptrequest.FieldIsAnswered:
		return m.OldIsAnswered(ctx)
	case promptrequest.FieldCreateDate:
		return m.OldCreateDate(ctx)
	}
	return nil, fmt.Errorf("unknown PromptRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromptRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case promptrequest.FieldIdentifier:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case promptrequest.FieldPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrompt(v)
		return nil
	case promptrequest.FieldIsQueued:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsQueued(v)
		return nil
	case promptrequest.FieldIsAnswered:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAnswered(v)
		return nil
	case promptrequest.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	}
	return fmt.Errorf("unknown PromptRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PromptRequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PromptRequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromptRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PromptRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PromptRequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PromptRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PromptRequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PromptRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PromptRequestMutation) ResetField(name string) error {
	switch name {
	case promptrequest.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case promptrequest.FieldPrompt:
		m.ResetPrompt()
		return nil
	case promptrequest.FieldIsQueued:
		m.ResetIsQueued()
		return nil
	case promptrequest.FieldIsAnswered:
		m.ResetIsAnswered()
		return nil
	case promptrequest.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	}
	return fmt.Errorf("unknown PromptRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PromptRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.prompt_response != nil {
		edges = append(edges, promptrequest.EdgePromptResponse)
	}
	if m.user != nil {
		edges = append(edges, promptrequest.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PromptRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case promptrequest.EdgePromptResponse:
		if id := m.prompt_response; id != nil {
			return []ent.Value{*id}
		}
	case promptrequest.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PromptRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PromptRequestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PromptRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprompt_response {
		edges = append(edges, promptrequest.EdgePromptResponse)
	}
	if m.cleareduser {
		edges = append(edges, promptrequest.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PromptRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case promptrequest.EdgePromptResponse:
		return m.clearedprompt_response
	case promptrequest.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PromptRequestMutation) ClearEdge(name string) error {
	switch name {
	case promptrequest.EdgePromptResponse:
		m.ClearPromptResponse()
		return nil
	case promptrequest.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown PromptRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PromptRequestMutation) ResetEdge(name string) error {
	switch name {
	case promptrequest.EdgePromptResponse:
		m.ResetPromptResponse()
		return nil
	case promptrequest.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown PromptRequest edge %s", name)
}

// PromptResponseMutation represents an operation that mutates the PromptResponse nodes in the graph.
type PromptResponseMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	response              *string
	create_date           *time.Time
	clearedFields         map[string]struct{}
	prompt_request        *int
	clearedprompt_request bool
	done                  bool
	oldValue              func(context.Context) (*PromptResponse, error)
	predicates            []predicate.PromptResponse
}

var _ ent.Mutation = (*PromptResponseMutation)(nil)

// promptresponseOption allows management of the mutation configuration using functional options.
type promptresponseOption func(*PromptResponseMutation)

// newPromptResponseMutation creates new mutation for the PromptResponse entity.
func newPromptResponseMutation(c config, op Op, opts ...promptresponseOption) *PromptResponseMutation {
	m := &PromptResponseMutation{
		config:        c,
		op:            op,
		typ:           TypePromptResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPromptResponseID sets the ID field of the mutation.
func withPromptResponseID(id int) promptresponseOption {
	return func(m *PromptResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *PromptResponse
		)
		m.oldValue = func(ctx context.Context) (*PromptResponse, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PromptResponse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPromptResponse sets the old PromptResponse of the mutation.
func withPromptResponse(node *PromptResponse) promptresponseOption {
	return func(m *PromptResponseMutation) {
		m.oldValue = func(context.Context) (*PromptResponse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PromptResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PromptResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PromptResponseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PromptResponseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PromptResponse.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResponse sets the "response" field.
func (m *PromptResponseMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *PromptResponseMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the PromptResponse entity.
// If the PromptResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptResponseMutation) OldResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ResetResponse resets all changes to the "response" field.
func (m *PromptResponseMutation) ResetResponse() {
	m.response = nil
}

// SetCreateDate sets the "create_date" field.
func (m *PromptResponseMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *PromptResponseMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the PromptResponse entity.
// If the PromptResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptResponseMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *PromptResponseMutation) ResetCreateDate() {
	m.create_date = nil
}

// SetPromptRequestID sets the "prompt_request" edge to the PromptRequest entity by id.
func (m *PromptResponseMutation) SetPromptRequestID(id int) {
	m.prompt_request = &id
}

// ClearPromptRequest clears the "prompt_request" edge to the PromptRequest entity.
func (m *PromptResponseMutation) ClearPromptRequest() {
	m.clearedprompt_request = true
}

// PromptRequestCleared reports if the "prompt_request" edge to the PromptRequest entity was cleared.
func (m *PromptResponseMutation) PromptRequestCleared() bool {
	return m.clearedprompt_request
}

// PromptRequestID returns the "prompt_request" edge ID in the mutation.
func (m *PromptResponseMutation) PromptRequestID() (id int, exists bool) {
	if m.prompt_request != nil {
		return *m.prompt_request, true
	}
	return
}

// PromptRequestIDs returns the "prompt_request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PromptRequestID instead. It exists only for internal usage by the builders.
func (m *PromptResponseMutation) PromptRequestIDs() (ids []int) {
	if id := m.prompt_request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPromptRequest resets all changes to the "prompt_request" edge.
func (m *PromptResponseMutation) ResetPromptRequest() {
	m.prompt_request = nil
	m.clearedprompt_request = false
}

// Where appends a list predicates to the PromptResponseMutation builder.
func (m *PromptResponseMutation) Where(ps ...predicate.PromptResponse) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PromptResponseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PromptResponseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PromptResponse, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PromptResponseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PromptResponseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PromptResponse).
func (m *PromptResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PromptResponseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.response != nil {
		fields = append(fields, promptresponse.FieldResponse)
	}
	if m.create_date != nil {
		fields = append(fields, promptresponse.FieldCreateDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PromptResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case promptresponse.FieldResponse:
		return m.Response()
	case promptresponse.FieldCreateDate:
		return m.CreateDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PromptResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case promptresponse.FieldResponse:
		return m.OldResponse(ctx)
	case promptresponse.FieldCreateDate:
		return m.OldCreateDate(ctx)
	}
	return nil, fmt.Errorf("unknown PromptResponse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromptResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case promptresponse.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case promptresponse.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	}
	return fmt.Errorf("unknown PromptResponse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PromptResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PromptResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromptResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PromptResponse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PromptResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PromptResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PromptResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PromptResponse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PromptResponseMutation) ResetField(name string) error {
	switch name {
	case promptresponse.FieldResponse:
		m.ResetResponse()
		return nil
	case promptresponse.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	}
	return fmt.Errorf("unknown PromptResponse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PromptResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prompt_request != nil {
		edges = append(edges, promptresponse.EdgePromptRequest)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PromptResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case promptresponse.EdgePromptRequest:
		if id := m.prompt_request; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PromptResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PromptResponseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PromptResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprompt_request {
		edges = append(edges, promptresponse.EdgePromptRequest)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PromptResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case promptresponse.EdgePromptRequest:
		return m.clearedprompt_request
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PromptResponseMutation) ClearEdge(name string) error {
	switch name {
	case promptresponse.EdgePromptRequest:
		m.ClearPromptRequest()
		return nil
	}
	return fmt.Errorf("unknown PromptResponse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PromptResponseMutation) ResetEdge(name string) error {
	switch name {
	case promptresponse.EdgePromptRequest:
		m.ResetPromptRequest()
		return nil
	}
	return fmt.Errorf("unknown PromptResponse edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	username               *string
	password               *[]byte
	salt                   *[]byte
	create_date            *time.Time
	clearedFields          map[string]struct{}
	prompt_requests        map[int]struct{}
	removedprompt_requests map[int]struct{}
	clearedprompt_requests bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetSalt sets the "salt" field.
func (m *UserMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *UserMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *UserMutation) ResetSalt() {
	m.salt = nil
}

// SetCreateDate sets the "create_date" field.
func (m *UserMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *UserMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *UserMutation) ResetCreateDate() {
	m.create_date = nil
}

// AddPromptRequestIDs adds the "prompt_requests" edge to the PromptRequest entity by ids.
func (m *UserMutation) AddPromptRequestIDs(ids ...int) {
	if m.prompt_requests == nil {
		m.prompt_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.prompt_requests[ids[i]] = struct{}{}
	}
}

// ClearPromptRequests clears the "prompt_requests" edge to the PromptRequest entity.
func (m *UserMutation) ClearPromptRequests() {
	m.clearedprompt_requests = true
}

// PromptRequestsCleared reports if the "prompt_requests" edge to the PromptRequest entity was cleared.
func (m *UserMutation) PromptRequestsCleared() bool {
	return m.clearedprompt_requests
}

// RemovePromptRequestIDs removes the "prompt_requests" edge to the PromptRequest entity by IDs.
func (m *UserMutation) RemovePromptRequestIDs(ids ...int) {
	if m.removedprompt_requests == nil {
		m.removedprompt_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.prompt_requests, ids[i])
		m.removedprompt_requests[ids[i]] = struct{}{}
	}
}

// RemovedPromptRequests returns the removed IDs of the "prompt_requests" edge to the PromptRequest entity.
func (m *UserMutation) RemovedPromptRequestsIDs() (ids []int) {
	for id := range m.removedprompt_requests {
		ids = append(ids, id)
	}
	return
}

// PromptRequestsIDs returns the "prompt_requests" edge IDs in the mutation.
func (m *UserMutation) PromptRequestsIDs() (ids []int) {
	for id := range m.prompt_requests {
		ids = append(ids, id)
	}
	return
}

// ResetPromptRequests resets all changes to the "prompt_requests" edge.
func (m *UserMutation) ResetPromptRequests() {
	m.prompt_requests = nil
	m.clearedprompt_requests = false
	m.removedprompt_requests = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.salt != nil {
		fields = append(fields, user.FieldSalt)
	}
	if m.create_date != nil {
		fields = append(fields, user.FieldCreateDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldSalt:
		return m.Salt()
	case user.FieldCreateDate:
		return m.CreateDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldSalt:
		return m.OldSalt(ctx)
	case user.FieldCreateDate:
		return m.OldCreateDate(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case user.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldSalt:
		m.ResetSalt()
		return nil
	case user.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prompt_requests != nil {
		edges = append(edges, user.EdgePromptRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePromptRequests:
		ids := make([]ent.Value, 0, len(m.prompt_requests))
		for id := range m.prompt_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprompt_requests != nil {
		edges = append(edges, user.EdgePromptRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePromptRequests:
		ids := make([]ent.Value, 0, len(m.removedprompt_requests))
		for id := range m.removedprompt_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprompt_requests {
		edges = append(edges, user.EdgePromptRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePromptRequests:
		return m.clearedprompt_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePromptRequests:
		m.ResetPromptRequests()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
